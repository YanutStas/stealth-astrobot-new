// üìÅ src/utils/astroChart.js
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ú–∏–Ω–∏-–¥–≤–∏–∂–æ–∫: —Ä–µ–Ω–¥–µ—Ä ¬´—á–∏—Å—Ç–æ–π¬ª –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö
// –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤, emoji –∏ —Ç.–¥. –õ–µ–≥–µ–Ω–¥–∞ - —Å–ø—Ä–∞–≤–∞, –∫—Ä—É–≥ —á—É—Ç—å
// —Å–º–µ—â—ë–Ω –≤–ª–µ–≤–æ. –§–∞–π–ª –∫–µ—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ /tmp –ø–æ uid+—Å—Ç—Ä–æ–∫–µ –∑–∞–ø—Ä–æ—Å–∞
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const { createCanvas } = require("@napi-rs/canvas");
const fs = require("fs");
const path = require("path");
const swe = require("swisseph");
const crypto = require("crypto");

/* –≥–¥–µ –ª–µ–∂–∞—Ç *.se1 Swiss-Ephemeris */
swe.swe_set_ephe_path(path.join(require.resolve("swisseph"), "..", "ephe"));

/* –ø–ª–∞–Ω–µ—Ç—ã: —Ç–µ–≥ (2-–±—É–∫–≤—ã), —Ä—É—Å—Å–∫–∏–π, —Ü–≤–µ—Ç, –∫–æ–¥ Swiss */
const PLANETS = [
  { tag: "–°–ª", name: "–°–æ–ª–Ω—Ü–µ", c: "#ffcb00", code: swe.SE_SUN },
  { tag: "–õ—É", name: "–õ—É–Ω–∞", c: "#c9c9c9", code: swe.SE_MOON },
  { tag: "–ú–µ", name: "–ú–µ—Ä–∫—É—Ä–∏–π", c: "#ffae5c", code: swe.SE_MERCURY },
  { tag: "–í–µ", name: "–í–µ–Ω–µ—Ä–∞", c: "#ff5ea2", code: swe.SE_VENUS },
  { tag: "–ú–∞", name: "–ú–∞—Ä—Å", c: "#ff4136", code: swe.SE_MARS },
  { tag: "–Æ–ø", name: "–Æ–ø–∏—Ç–µ—Ä", c: "#23e0a3", code: swe.SE_JUPITER },
  { tag: "–°–∞", name: "–°–∞—Ç—É—Ä–Ω", c: "#c38be4", code: swe.SE_SATURN },
  { tag: "–£—Ä", name: "–£—Ä–∞–Ω", c: "#29c7f6", code: swe.SE_URANUS },
  { tag: "–ù–ø", name: "–ù–µ–ø—Ç—É–Ω", c: "#4274ff", code: swe.SE_NEPTUNE },
  { tag: "–ü–ª", name: "–ü–ª—É—Ç–æ–Ω", c: "#ff9419", code: swe.SE_PLUTO },
];

/* —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ ¬´–°–æ–ª–Ω—Ü–µ _–≤ –û–≤–Ω–µ_¬ª, ‚Ä¶ */
const SIGNS_PRE = [
  "–≤ –û–≤–Ω–µ",
  "–≤ –¢–µ–ª—å—Ü–µ",
  "–≤ –ë–ª–∏–∑–Ω–µ—Ü–∞—Ö",
  "–≤ –†–∞–∫–µ",
  "–≤–æ –õ—å–≤–µ",
  "–≤ –î–µ–≤–µ",
  "–≤ –í–µ—Å–∞—Ö",
  "–≤ –°–∫–æ—Ä–ø–∏–æ–Ω–µ",
  "–≤ –°—Ç—Ä–µ–ª—å—Ü–µ",
  "–≤ –ö–æ–∑–µ—Ä–æ–≥–µ",
  "–≤ –í–æ–¥–æ–ª–µ–µ",
  "–≤ –†—ã–±–∞—Ö",
];

const RAD = Math.PI / 180;
const pol = (cx, cy, r, deg) => {
  const a = deg * RAD - Math.PI / 2;
  return [cx + r * Math.cos(a), cy + r * Math.sin(a)];
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function drawNatalChart(uid, input) {
  /* –∫—ç—à */
  const h = crypto.createHash("md5").update(input).digest("hex").slice(0, 8);
  const file = `/tmp/natal_${uid}_${h}.png`;
  if (fs.existsSync(file)) return file;

  /* ‚îÄ‚îÄ –ø–∞—Ä—Å–∏–º –≤–≤–æ–¥ (01.01.2000 10:00 –ú–æ—Å–∫–≤–∞) ‚îÄ‚îÄ */
  const [d, m, y, hh, mm, ...cityArr] = input.split(/[:.\s]+/);
  const JD = swe.swe_julday(+y, +m, +d, +hh + +mm / 60, swe.SE_GREG_CAL);
  const city = cityArr.join(" ");

  /* –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã+–∑–Ω–∞–∫ */
  PLANETS.forEach((p) => {
    p.lon = swe.swe_calc_ut(JD, p.code, swe.SEFLG_SWIEPH).longitude;
    p.sign = Math.floor(p.lon / 30) % 12;
  });

  /* canvas */
  const W = 1600,
    H = 1000,
    CX = 520,
    CY = H / 2,
    R = 460, // –∫—Ä—É–≥ —Å–¥–≤–∏–Ω—É—Ç –≤–ª–µ–≤–æ
    LX = W - 350; // –ª–µ–≥–µ–Ω–¥–∞

  const cv = createCanvas(W, H);
  const ctx = cv.getContext("2d");

  /* —Ñ–æ–Ω */
  const g = ctx.createLinearGradient(0, 0, W, H);
  g.addColorStop(0, "#0f172a");
  g.addColorStop(1, "#1e293b");
  ctx.fillStyle = g;
  ctx.fillRect(0, 0, W, H);

  /* –≤–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ –∏ 12 —Ä–∞–¥–∏–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π */
  ctx.strokeStyle = "#334155";
  ctx.lineWidth = 3;
  ctx.beginPath();
  ctx.arc(CX, CY, R, 0, Math.PI * 2);
  ctx.stroke();

  ctx.lineWidth = 1;
  for (let i = 0; i < 12; i++) {
    const [x, y] = pol(CX, CY, R, i * 30);
    ctx.beginPath();
    ctx.moveTo(CX, CY);
    ctx.lineTo(x, y);
    ctx.stroke();
  }

  /* –ø–ª–∞–Ω–µ—Ç—ã */
  PLANETS.forEach((p) => {
    const [x, y] = pol(CX, CY, R - 95, p.lon);

    ctx.fillStyle = p.c;
    ctx.beginPath();
    ctx.arc(x, y, 24, 0, Math.PI * 2);
    ctx.fill();

    ctx.fillStyle = "#fff";
    ctx.font = "bold 22px Arial, sans-serif";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(p.tag, x, y);
  });

  /* —Ü–µ–Ω—Ç—Ä-–Ω–∞–¥–ø–∏—Å—å */
  ctx.fillStyle = "#fff";
  ctx.textAlign = "center";
  ctx.font = "bold 32px Arial, sans-serif";
  ctx.fillText("–ù–ê–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê", CX, CY - 10);
  ctx.font = "20px Arial, sans-serif";
  ctx.fillText(
    `${d}.${m}.${y}  ${hh}:${mm.padStart(2, "0")}  ${city}`,
    CX,
    CY + 26
  );

  /* –ª–µ–≥–µ–Ω–¥–∞ */
  const top = CY - R + 60,
    step = 42;
  ctx.textAlign = "left";
  ctx.font = "24px Arial, sans-serif";
  ctx.fillText("–ü–ª–∞–Ω–µ—Ç—ã –∏ –∑–Ω–∞–∫–∏", LX, top);

  ctx.font = "18px Arial, sans-serif";
  PLANETS.forEach((p, i) => {
    const y = top + 40 + i * step;
    ctx.fillStyle = p.c;
    ctx.beginPath();
    ctx.arc(LX, y, 12, 0, Math.PI * 2);
    ctx.fill();

    ctx.fillStyle = "#fff";
    ctx.fillText(`${p.tag}: ${p.name} ${SIGNS_PRE[p.sign]}`, LX + 28, y + 3);
  });

  fs.writeFileSync(file, cv.toBuffer("image/png"));
  return file;
}
module.exports = { drawNatalChart };
