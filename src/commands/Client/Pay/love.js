/*  src/commands/Client/Pay/love.js  */
const { Markup } = require("telegraf");
const axios = require("axios");
const logger = require("../../../logger");
const MODELS = require("../../../models");
const pending = require("../../pendingStore");

module.exports = (bot, flow) => {
  const feature = "love";
  const label = "–∞–Ω–∞–ª–∏–∑ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π";

  /* ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ ¬´–ê–Ω–∞–ª–∏–∑ –ª—é–±–≤–∏¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.action("love_start", async (ctx) => {
    await ctx.answerCbQuery();
    flow.set(ctx.from.id, feature);

    pending.set(ctx.from.id, {
      label,
      ask:
        "‚ú® –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n" +
        "–î–ª—è *–∞–Ω–∞–ª–∏–∑–∞ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π* –ø—Ä–∏—à–ª–∏ —á–µ—Ç—ã—Ä—å–º—è —Å—Ç—Ä–æ–∫–∞–º–∏:\n" +
        "1) üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ‚è∞ –í—Ä–µ–º—è üó∫ –ì–æ—Ä–æ–¥\n" +
        "2) üíñ –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (—Å–≤–æ–±–æ–¥–Ω–∞, –∑–∞–º—É–∂–µ–º –∏ —Ç.–¥.)\n" +
        "3) ‚ùì –ß—Ç–æ –≤–æ–ª–Ω—É–µ—Ç (1-2 —Ñ—Ä–∞–∑—ã)\n" +
        "–ü—Ä–∏–º–µ—Ä:\n" +
        "1) 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞\n" +
        "2) –≤—Å—Ç—Ä–µ—á–∞—é—Å—å\n" +
        "3) –ø–æ—á–µ–º—É –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?",
    });

    ctx.reply(
      `üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *${label}* –ø–µ—Ä–µ–≤–µ–¥–∏ 50 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
        "2200 7009 7760 7737\n\n–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ üëá",
      { parse_mode: "Markdown" }
    );
  });

  /* ‚îÄ‚îÄ regexp: —á–µ—Ç—ã—Ä–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π 1)-4) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const loveReg =
    /^\s*(?:1\)\s*)?(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+?)\s*(?:\r?\n|\r)\s*(?:2\)\s*)?(.+?)\s*(?:\r?\n|\r)\s*(?:3\)\s*)?(.+?)\s*(?:\r?\n|\r)\s*(?:4\)\s*)?(.+)$/;

  const SYSTEM_MSG =
    "–¢—ã –º—è–≥–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–∫–æ—É—á. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ 5 –±–ª–æ–∫–∞–º–∏: 1. –õ–∏—á–Ω–∞—è –ª—é–±–æ–≤—å-—ç–Ω–µ—Ä–≥–∏—è, 2. –≠–º–æ—Ü–∏–∏/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤, 3. –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, 4. –¢–æ—á–∫–∏ —Ä–æ—Å—Ç–∞/–ø—Ä–æ–±–ª–µ–º—ã, 5. –°–æ–≤–µ—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥. " +
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ¬´#¬ª –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–æ–≤, ‚â§1200 —Å–∏–º–≤–æ–ª–æ–≤, —Ç—ë–ø–ª—ã–π —Ä—É—Å—Å–∫–∏–π, —ç–º–æ–¥–∑–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —Å–µ–π—á–∞—Å 2025 –≥–æ–¥. " +
    "–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ä—Ç—å, –±–æ–ª–µ–∑–Ω–∏ –∏ –¥–∞–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã.";

  /* ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.hears(loveReg, async (ctx) => {
    if (flow.get(ctx.from.id) !== feature) return;

    const t0 = Date.now();
    const tag = ctx.from.username || ctx.from.id;
    logger.info(`[love] –∑–∞–ø—Ä–æ—Å @${tag}`);

    await ctx.reply("üíå –ß–∏—Ç–∞—é –ª—é–±–æ–≤–Ω—ã–µ –ª–∏–Ω–∏–∏‚Ä¶");

    // –°–æ–±–∏—Ä–∞–µ–º —á–µ—Ç—ã—Ä–µ —á–∞—Å—Ç–∏ –∏–∑ regExp-–≥—Ä—É–ø–ø
    const [, birth, status, concern, extra] = ctx.message.text.match(loveReg);
    // ¬´extra¬ª –∑–¥–µ—Å—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ—Ä–∞–∑—É-–≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª 4-–π –ø—É–Ω–∫—Ç
    const userPrompt = `–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ 5 –±–ª–æ–∫–∞–º:

1. ‚ù§Ô∏è –õ–∏—á–Ω–∞—è –ª—é–±–æ–≤—å-—ç–Ω–µ—Ä–≥–∏—è  
2. üíû –≠–º–æ—Ü–∏–∏ / –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤  
3. üíç –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª  
4. ‚ö†Ô∏è –¢–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ / –ø—Ä–æ–±–ª–µ–º—ã  
5. ‚ú® –°–æ–≤–µ—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥  

–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birth.trim()}  
–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${status.trim()}  
–ß—Ç–æ –≤–æ–ª–Ω—É–µ—Ç: ${concern.trim()}  
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å): ${extra.trim()}`;

    for (const model of MODELS) {
      try {
        const { data } = await axios.post(
          "https://openrouter.ai/api/v1/chat/completions",
          {
            model,
            messages: [
              { role: "system", content: SYSTEM_MSG },
              { role: "user",   content: userPrompt },
            ],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              "Content-Type":  "application/json",
            },
          }
        );

        const answer = (data.choices?.[0]?.message?.content || "").trim();
        await ctx.reply(answer || "üåå –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç.");
        logger.info(`[love] ok ${model} ${Date.now() - t0}–º—Å`);
        pending.delete(ctx.from.id);
        flow.delete(ctx.from.id);
        return;
      } catch (e) {
        logger.warn(`[love] FAIL ${model} | ${e.code || e.response?.status}`);
      }
    }

    ctx.reply("üõ†Ô∏è –í–µ–Ω–µ—Ä–∞ –≤ —Ç—É—á–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
  });
};


// const { Markup } = require("telegraf");
// const axios = require("axios");
// const logger = require("../../../logger");
// const MODELS = require("../../../models");
// const pending = require("../../pendingStore");

// module.exports = (bot, flow) => {
//   const feature = "love";
//   const label = "–∞–Ω–∞–ª–∏–∑ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π";

//   /* ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
//   bot.action("love_start", async (ctx) => {
//     await ctx.answerCbQuery();
//     flow.set(ctx.from.id, feature);

//     pending.set(ctx.from.id, {
//       label,
//       ask: `‚ú® –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

// –ü—Ä–∏—à–ª–∏ *–¥–∞–Ω–Ω—ã–µ —á—ë—Ç–∫–æ 4-–º—è —Å—Ç—Ä–æ–∫–∞–º–∏* (–Ω—É–º–µ—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞):

// 1) üìÖ  –î–∞—Ç–∞ ‚è∞ –í—Ä–µ–º—è  
// 2) üó∫  –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è  
// 3) üíñ –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (—Å–≤–æ–±–æ–¥–Ω–∞, –∑–∞–º—É–∂–µ–º ‚Ä¶)  
// 4) ‚ùì –ß—Ç–æ –≤–æ–ª–Ω—É–µ—Ç (1-2 —Ñ—Ä–∞–∑—ã)

// –ü—Ä–∏–º–µ—Ä:
// 1) 01.01.2000 10:00
// 2) –ú–æ—Å–∫–≤–∞
// 3) –í—Å—Ç—Ä–µ—á–∞—é—Å—å
// 4) –ü–æ—á–µ–º—É –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?`,
//     });

//     for (const model of MODELS) {
//       try {
//         const { data } = await axios.post(/* ‚Ä¶ */);

//         /* —á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–π –∂–∏—Ä ‚Äî –¥–≤–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ —Å–ø—Ä–∞–≤–∞ –∏ —Å–ª–µ–≤–∞ */
//         const answer = (data.choices?.[0]?.message?.content || "")
//           .replace(/\*\*/g, "") // <-- –∑–¥–µ—Å—å
//           .trim();

//         await ctx.reply(answer);
//         logger.info(`[love] ok ${model} ${Date.now() - t0}–º—Å`);
//         sent = true;
//         break;
//       } catch (e) {
//         /* ‚Ä¶ */
//       }
//     }

//     ctx.reply(
//       `üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *${label}* –ø–µ—Ä–µ–≤–µ–¥–∏ 50 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
//         "2200 7009 7760 7737\n\n–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —á–µ–∫ üëá",
//       { parse_mode: "Markdown" }
//     );
//   });

//   /* ‚îÄ‚îÄ regexp —á–µ—Ç—ã—Ä—ë—Ö –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
//   const loveReg =
//     /^\s*1\)\s*(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2})\s*\n\s*2\)\s*(.+?)\s*\n\s*3\)\s*(.+?)\s*\n\s*4\)\s*([\s\S]+)$/i;

//   const SYSTEM_MSG =
//     "–¢—ã –º—è–≥–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–∫–æ—É—á. –î–∞–π 5 –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤, –∫–∞–∂–¥—ã–π ‚â§3 —Å—Ç—Ä–æ–∫–∏, " +
//     "–≤–µ—Å—å –æ—Ç–≤–µ—Ç ‚â§1200 —Å–∏–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏. " +
//     "–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–∑–Ω–∏, —Å–º–µ—Ä—Ç—å –∏ –¥–∞–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã.";

//   /* ‚îÄ‚îÄ –∞–Ω–∞–ª–∏–∑ –ª—é–±–≤–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
//   bot.hears(loveReg, async (ctx) => {
//     if (flow.get(ctx.from.id) !== feature) return;

//     const [, dateTime, city, status, question] =
//       ctx.message.text.match(loveReg);
//     const tag = ctx.from.username || ctx.from.id;
//     const t0 = Date.now();
//     logger.info(`[love] –∑–∞–ø—Ä–æ—Å @${tag}`);

//     await ctx.reply("üíå –ß–∏—Ç–∞—é –ª—é–±–æ–≤–Ω—ã–µ –ª–∏–Ω–∏–∏‚Ä¶");

//     const userPrompt = `–°–¥–µ–ª–∞–π *–∞–Ω–∞–ª–∏–∑ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π* —Ä–æ–≤–Ω–æ –ø–æ 5 –±–ª–æ–∫–∞–º:

// 1. ‚ù§Ô∏è –õ–∏—á–Ω–∞—è –ª—é–±–æ–≤—å-—ç–Ω–µ—Ä–≥–∏—è  
// 2. üíû –≠–º–æ—Ü–∏–∏ / –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤  
// 3. üíç –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª  
// 4. ‚ö†Ô∏è –¢–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ / –ø—Ä–æ–±–ª–µ–º—ã  
// 5. ‚ú® –°–æ–≤–µ—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥  

// –î–∞–Ω–æ:  
// ‚Ä¢ –î–∞—Ç–∞/–≤—Ä–µ–º—è ‚Äî ${dateTime}  
// ‚Ä¢ –ì–æ—Ä–æ–¥ ‚Äî ${city}  
// ‚Ä¢ –°—Ç–∞—Ç—É—Å ‚Äî ${status}  
// ‚Ä¢ –í–æ–ø—Ä–æ—Å ‚Äî ${question.trim()}`;

//     let sent = false;
//     for (const model of MODELS) {
//       try {
//         const { data } = await axios.post(
//           "https://openrouter.ai/api/v1/chat/completions",
//           {
//             model,
//             messages: [
//               { role: "system", content: SYSTEM_MSG },
//               { role: "user", content: userPrompt },
//             ],
//           },
//           {
//             headers: {
//               Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
//               "Content-Type": "application/json",
//             },
//           }
//         );

//         const answer = (data.choices?.[0]?.message?.content || "").trim();
//         if (!answer) throw new Error("empty answer");

//         await ctx.reply(answer);
//         logger.info(`[love] ok ${model} ${Date.now() - t0}–º—Å`);
//         sent = true;
//         break;
//       } catch (e) {
//         logger.warn(
//           `[love] FAIL ${model} | ${e.response?.status || e.code} ${e.message}`
//         );
//       }
//     }

//     if (!sent) ctx.reply("üõ†Ô∏è –í–µ–Ω–µ—Ä–∞ –≤ —Ç—É—á–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");

//     /* —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ */
//     pending.delete(ctx.from.id);
//     flow.delete(ctx.from.id);
//   });
// };
