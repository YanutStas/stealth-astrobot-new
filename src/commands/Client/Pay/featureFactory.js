const { Markup } = require("telegraf");
const axios = require("axios");
const pending = require("../../pendingStore");
const logger = require("../../../logger");
const MODELS = require("../../../models");

/* ‚îÄ‚îÄ –æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–Ω—ã—Ö —Ñ–∏—á ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const COMMON_SYS =
  "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –ù–µ –≤—Å—Ç–∞–≤–ª—è–π ¬´###¬ª –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –¥—Ä—É–≥–∏–µ –ø—É–Ω–∫—Ç—ã, " +
  "–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ä–µ–∫–ª–∞–º—É –∏–ª–∏ —Å—Å—ã–ª–∫–∏. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —ç–º–æ–¥–∑–∏. " +
  "–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —Å–µ–π—á–∞—Å 2025 –≥–æ–¥.";

module.exports = function createPaidFeature(bot, flow, cfg) {
  const {
    key,
    buttonId,
    label,
    price,
    askText,
    waitText,
    hintText,
    regExp,
    sysMsg,
    buildPrompt,
  } = cfg;

  /* ---------- –ö–ù–û–ü–ö–ê –í –ú–ï–ù–Æ ---------- */
  bot.action(buttonId, async (ctx) => {
    await ctx.answerCbQuery();
    flow.set(ctx.from.id, key);
    pending.set(ctx.from.id, { label, ask: askText });

    logger.info(
      `[${key}] button pressed by @${ctx.from.username || ctx.from.id}`
    );

    await ctx.reply(
      `üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *${label}* –ø–µ—Ä–µ–≤–µ–¥–∏ ${price} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
        "2200 7009 7760 7737\n\n–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ üëá",
      { parse_mode: "Markdown" }
    );
  });

  /* ---------- –û–°–ù–û–í–ù–û–ô HEARS ---------- */
  bot.hears(
    (text, ctx) => flow.get(ctx.from.id) === key && regExp.test(text),
    async (ctx) => {
      const m = ctx.message.text.match(regExp);
      if (!m) {
        logger.warn(`[${key}] regex miss`);
        return;
      }

      await ctx.reply(waitText);

      const userPrompt = buildPrompt(m);
      const systemMsg = `${COMMON_SYS}\n${sysMsg}`;

      for (const model of MODELS) {
        try {
          const { data } = await axios.post(
            "https://openrouter.ai/api/v1/chat/completions",
            {
              model,
              messages: [
                { role: "system", content: systemMsg },
                { role: "user", content: userPrompt },
              ],
            },
            {
              headers: {
                Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
                "Content-Type": "application/json",
              },
            }
          );

          const answer = (data.choices?.[0]?.message?.content || "").trim();

          /* ‚îÄ‚îÄ –ª–æ–≥–∏—Ä—É–µ–º 1-—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ ‚îÄ‚îÄ */
          logger.debug(
            `[${key}] ‚ñºPROMPT(${model})\n${userPrompt}\n‚ñ≤ANSWER(first400)\n${answer.slice(
              0,
              400
            )}‚Ä¶`
          );

          await ctx.reply(
            answer || "üåå –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç.",
            Markup.inlineKeyboard([
              [Markup.button.callback("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", "back_to_menu")],
            ])
          );

          logger.info(`[${key}] ok ${model}`);
          pending.delete(ctx.from.id);
          flow.delete(ctx.from.id);
          return;
        } catch (e) {
          logger.warn(
            `[${key}] FAIL ${model} | ${e.code || e.response?.status}`
          );
        }
      }

      await ctx.reply(
        "üõ†Ô∏è –ù–µ–±–æ –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
        Markup.inlineKeyboard([
          [Markup.button.callback("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", "back_to_menu")],
        ])
      );
    }
  );

  /* ---------- –ü–û–î–°–ö–ê–ó–ö–ê / –ü–†–û–ü–£–°–ö ---------- */
  bot.on("message", async (ctx, next) => {
    if (flow.get(ctx.from.id) === key) {
      await ctx.reply(hintText, { parse_mode: "Markdown" });
      return; // –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ; –¥–∞–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
    }
    return next(); // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º middlewares
  });
};
