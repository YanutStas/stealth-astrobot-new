/*  src/commands/Client/Pay/compatibility.js  */
const { Markup } = require("telegraf");
const axios = require("axios");
const logger = require("../../../logger");
const MODELS = require("../../../models");
const pending = require("../../pendingStore");

module.exports = (bot, flow) => {
  const feature = "compat";
  const label = "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—ã";

  /* ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ ¬´–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.action("compat_start", async (ctx) => {
    await ctx.answerCbQuery();
    flow.set(ctx.from.id, feature);

    pending.set(ctx.from.id, {
      label,
      ask:
        "‚ú® –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n" +
        "–ü—Ä–∏—à–ª–∏ *–¥–≤–µ –∫–∞—Ä—Ç—ã* –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏ (–º–æ–∂–Ω–æ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π):\n" +
        "1) üìÖ –î–∞—Ç–∞ ‚è∞ –í—Ä–µ–º—è üó∫ –ì–æ—Ä–æ–¥\n" +
        "2) üìÖ –î–∞—Ç–∞ ‚è∞ –í—Ä–µ–º—è üó∫ –ì–æ—Ä–æ–¥\n\n" +
        "–ü—Ä–∏–º–µ—Ä:\n" +
        "1) 10.04.1995 09:30 –°–º–æ–ª–µ–Ω—Å–∫\n" +
        "2) 25.12.1996 14:45 –ö–∞–∑–∞–Ω—å",
    });

    ctx.reply(
      `üí≥ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å *${label}* –ø–µ—Ä–µ–≤–µ–¥–∏ 50 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
        "2200 7009 7760 7737\n\n–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ üëá",
      { parse_mode: "Markdown" }
    );
  });

  /* ‚îÄ‚îÄ regexp: –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ (CR/LF), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å ¬´1)¬ª / ¬´2)¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const dualReg =
    /^\s*(?:1\)\s*)?(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+?)\s*(?:\r?\n|\r)\s*(?:2\)\s*)?(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+)$/;

  const SYSTEM_MSG =
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –û—Ç–≤–µ—á–∞–π *—Ä–æ–≤–Ω–æ –ø—è—Ç—å—é* –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏ (1-5), " +
    "–∫–∞–∂–¥—ã–π ‚â§3 —Å—Ç—Ä–æ–∫–∏, –≤–µ—Å—å –æ—Ç–≤–µ—Ç ‚â§1200 —Å–∏–º–≤–æ–ª–æ–≤. –ù–µ –≤—Å—Ç–∞–≤–ª—è–π ¬´###¬ª –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –¥—Ä—É–≥–∏–µ –ø—É–Ω–∫—Ç—ã, " +
    "–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ä–µ–∫–ª–∞–º—É –∏–ª–∏ —Å—Å—ã–ª–∫–∏. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —ç–º–æ–¥–∑–∏. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —Å–µ–π—á–∞—Å 2025 –≥–æ–¥.";

  /* ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.hears(dualReg, async (ctx) => {
    if (flow.get(ctx.from.id) !== feature) return;

    const [, cardA, cardB] = ctx.message.text.match(dualReg);
    const tag = ctx.from.username || ctx.from.id;
    const t0 = Date.now();
    logger.info(`[compat] –∑–∞–ø—Ä–æ—Å @${tag}`);

    await ctx.reply("üíû –°–≤–µ—Ä—è—é –∑–≤—ë–∑–¥–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø–∞—Ä—ã‚Ä¶");

    const userPrompt = `–°–¥–µ–ª–∞–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—ã –ø–æ 5 –±–ª–æ–∫–∞–º:

1. üåü –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ  
2. üíó –≠–º–æ—Ü–∏–∏ / –±—ã—Ç  
3. üî• –ò–Ω—Ç–∏–º / —Å—Ç—Ä–∞—Å—Ç—å  
4. ü§ù –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —Ä–æ—Å—Ç  
5. ‚ú® –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä—ë–¥  

–ü–∞—Ä—Ç–Ω—ë—Ä A: ${cardA}  
–ü–∞—Ä—Ç–Ω—ë—Ä B: ${cardB}`;

    for (const model of MODELS) {
      try {
        const { data } = await axios.post(
          "https://openrouter.ai/api/v1/chat/completions",
          {
            model,
            messages: [
              { role: "system", content: SYSTEM_MSG },
              { role: "user", content: userPrompt },
            ],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              "Content-Type": "application/json",
            },
          }
        );

        const answer = (data.choices?.[0]?.message?.content || "").trim();

        /* –ø–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞ */
        logger.info(
          `[compat] ‚ñºPROMPT(${model})\n${SYSTEM_MSG}\n---\n${userPrompt}` +
            `\n‚ñ≤ANSWER(first500)\n${answer.slice(0, 500)}‚Ä¶`
        );

        /* sanity-check: 5 –±–ª–æ–∫–æ–≤ */
        if (!/^1\./m.test(answer) || answer.split(/\n[2-5]\./).length < 5) {
          logger.warn(`[compat] wrong-shape ${model}`);
          continue;
        }

        await ctx.reply(answer);
        logger.info(`[compat] ok ${model} ${Date.now() - t0}–º—Å`);
        pending.delete(ctx.from.id);
        flow.delete(ctx.from.id);
        return;
      } catch (e) {
        logger.warn(
          `[compat] FAIL ${model} | ${e.response?.status || e.code} ${
            e.message
          }`
        );
      }
    }

    ctx.reply("üõ†Ô∏è –ü–ª–∞–Ω–µ—Ç—ã —Å–ø–æ—Ä—è—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
  });
};

// /*  src/commands/Client/Pay/compatibility.js  */
// const { Markup } = require("telegraf");
// const axios = require("axios");
// const logger = require("../../../logger");
// const MODELS = require("../../../models");
// const pending = require("../../pendingStore");

// module.exports = (bot, flow) => {
//   const feature = "compat";
//   const label = "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—ã";

//   /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ ¬´–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
//   bot.action("compat_start", async (ctx) => {
//     await ctx.answerCbQuery();
//     flow.set(ctx.from.id, feature);

//     pending.set(ctx.from.id, {
//       label,
//       ask:
//         "‚ú® –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n" +
//         "–ü—Ä–∏—à–ª–∏ *–¥–≤–µ –∫–∞—Ä—Ç—ã* –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏ (–º–æ–∂–Ω–æ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π):\n" +
//         "1) üìÖ –î–∞—Ç–∞ ‚è∞ –í—Ä–µ–º—è üó∫ –ì–æ—Ä–æ–¥\n" +
//         "2) üìÖ –î–∞—Ç–∞ ‚è∞ –í—Ä–µ–º—è üó∫ –ì–æ—Ä–æ–¥\n\n" +
//         "–ü—Ä–∏–º–µ—Ä:\n" +
//         "1) 20.03.1996 09:30 –ú–æ—Å–∫–≤–∞\n" +
//         "2) 25.12.1996 14:45 –ú–æ—Å–∫–≤–∞",
//     });

//     ctx.reply(
//       `üí≥ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å *${label}* –ø–µ—Ä–µ–≤–µ–¥–∏ 50 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
//         "2200 7009 7760 7737\n\n–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ üëá",
//       { parse_mode: "Markdown" }
//     );
//   });

//   /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ regexp: –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ 1)/2) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
//   const dualReg =
//     /^\s*(?:1\)\s*)?(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+?)\s*(?:\r?\n|\r)\s*(?:2\)\s*)?(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+)$/;

//   const SYSTEM_MSG =
//     "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –û—Ç–≤–µ—á–∞–π *—Ä–æ–≤–Ω–æ –ø—è—Ç—å—é* –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏ (1-5), " +
//     "–∫–∞–∂–¥—ã–π ‚â§3 —Å—Ç—Ä–æ–∫–∏, –≤–µ—Å—å –æ—Ç–≤–µ—Ç ‚â§1200 —Å–∏–º–≤–æ–ª–æ–≤. –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–π, –ª–∏—à–Ω–∏—Ö –ø—É–Ω–∫—Ç–æ–≤, —Å—Å—ã–ª–æ–∫. " +
//     "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —ç–º–æ–¥–∑–∏.";

//   /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
//   bot.hears(dualReg, async (ctx) => {
//     if (flow.get(ctx.from.id) !== feature) return;

//     const [, cardA, cardB] = ctx.message.text.match(dualReg);
//     const tag = ctx.from.username || ctx.from.id;
//     const t0 = Date.now();
//     logger.info(`[compat] –∑–∞–ø—Ä–æ—Å @${tag}`);

//     await ctx.reply("üíû –°–≤–µ—Ä—è—é –∑–≤—ë–∑–¥–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø–∞—Ä—ã‚Ä¶");

//     const userPrompt = `–°–¥–µ–ª–∞–π *—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å* –ø–∞—Ä—ã –ø–æ 5 –±–ª–æ–∫–∞–º:

// 1. üåü –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ
// 2. üíó –≠–º–æ—Ü–∏–∏ / –±—ã—Ç
// 3. üî• –ò–Ω—Ç–∏–º / —Å—Ç—Ä–∞—Å—Ç—å
// 4. ü§ù –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —Ä–æ—Å—Ç
// 5. ‚ú® –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä—ë–¥

// –ü–∞—Ä—Ç–Ω—ë—Ä A: ${cardA}
// –ü–∞—Ä—Ç–Ω—ë—Ä B: ${cardB}`;

//     for (const model of MODELS) {
//       try {
//         const { data } = await axios.post(
//           "https://openrouter.ai/api/v1/chat/completions",
//           {
//             model,
//             messages: [
//               { role: "system", content: SYSTEM_MSG },
//               { role: "user", content: userPrompt },
//             ],
//           },
//           {
//             headers: {
//               Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
//               "Content-Type": "application/json",
//             },
//           }
//         );

//         const answer = (data.choices?.[0]?.message?.content || "").trim();

//         logger.info(
//           `[compat] ‚ñºPROMPT(${model})\n${SYSTEM_MSG}\n---\n${userPrompt}` +
//             `\n‚ñ≤ANSWER(first500)\n${answer.slice(0, 500)}‚Ä¶`
//         );

//         /* sanity-check: 5 –±–ª–æ–∫–æ–≤ */
//         if (!/^1\./m.test(answer) || answer.split(/\n[2-5]\./).length < 5) {
//           logger.warn(`[compat] wrong-shape ${model}`);
//           continue;
//         }

//         await ctx.reply(answer);
//         logger.info(`[compat] ok ${model} ${Date.now() - t0}–º—Å`);
//         pending.delete(ctx.from.id);
//         flow.delete(ctx.from.id);
//         return;
//       } catch (e) {
//         logger.warn(
//           `[compat] FAIL ${model} | ${e.response?.status || e.code} ${
//             e.message
//           }`
//         );
//       }
//     }

//     ctx.reply("üõ†Ô∏è –ü–ª–∞–Ω–µ—Ç—ã —Å–ø–æ—Ä—è—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
//   });
// };
