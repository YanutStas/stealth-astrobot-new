const { Markup } = require("telegraf");
const axios = require("axios");
const logger = require("../../../logger");
const MODELS = require("../../../models");
const pending = require("../../pendingStore");

module.exports = (bot, flow) => {
  const feature = "career";
  const label = "–∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑";

  /* ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ ¬´–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.action("career_start", async (ctx) => {
    await ctx.answerCbQuery();
    flow.set(ctx.from.id, feature);

    pending.set(ctx.from.id, {
      label,
      ask:
        "‚ú® –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n" +
        "–î–ª—è *–∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞* –ø—Ä–∏—à–ª–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n" +
        "1) üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ‚è∞ –í—Ä–µ–º—è üó∫ –ì–æ—Ä–æ–¥\n" +
        "2) üíº –¢–µ–∫—É—â–∞—è —Å—Ñ–µ—Ä–∞ / –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n" +
        "3) üéØ –ì–ª–∞–≤–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å (1-2 —Ñ—Ä–∞–∑—ã)\n\n" +
        "–ü—Ä–∏–º–µ—Ä:\n" +
        "1) 12.09.1998 09:30 –°–º–æ–ª–µ–Ω—Å–∫\n" +
        "2) –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥\n" +
        "3) –ö—É–¥–∞ —Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ?",
    });

    ctx.reply(
      `üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *${label}* –ø–µ—Ä–µ–≤–µ–¥–∏ 50 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
        "2200 7009 7760 7737\n\n–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ üëá",
      { parse_mode: "Markdown" }
    );
  });

  /* ‚îÄ‚îÄ regexp: —Ç—Ä–∏ –ø–æ–ª—è —á–µ—Ä–µ–∑ ¬´;¬ª –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  // –§–æ—Ä–º–∞—Ç —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç —Ç—Ä–∏ –ø—É–Ω–∫—Ç–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
  const careerReg =
    /^\s*(?:1\)\s*)?(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+?)\s*[;\r\n]+\s*(?:2\)\s*)?(.+?)\s*[;\r\n]+\s*(?:3\)\s*)?(.+)$/;

  const SYSTEM_MSG =
    "–¢—ã –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-HR. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ 5 –±–ª–æ–∫–∞–º–∏: 1. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, 2. –†–∏—Å–∫–∏ –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ, 3. –ü–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, 4. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, 5. –í–∞–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥. " +
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ¬´#¬ª –≤ –Ω–∞—á–∞–ª–µ, ‚â§1200 —Å–∏–º–≤–æ–ª–æ–≤, —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —Å–µ–π—á–∞—Å 2025 –≥–æ–¥; –±–µ–∑ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ —Å–º–µ—Ä—Ç–∏.";

  /* ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.hears(careerReg, async (ctx) => {
    if (flow.get(ctx.from.id) !== feature) return;

    const t0 = Date.now();
    const tag = ctx.from.username || ctx.from.id;
    logger.info(`[career] –∑–∞–ø—Ä–æ—Å @${tag}`);

    await ctx.reply("üìà –ß–∏—Ç–∞—é –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏‚Ä¶");

    // –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–∏ —á–∞—Å—Ç–∏ –∏–∑ regExp-–≥—Ä—É–ø–ø
    const [, birth, profession, question] = ctx.message.text.match(careerReg);
    const userPrompt = `–°–æ—Å—Ç–∞–≤—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ 5 –±–ª–æ–∫–∞–º:

1. üèÜ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã  
2. ‚ö†Ô∏è –†–∏—Å–∫–∏ –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ  
3. üí∞ –ü–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥ –∏ –ª—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞  
4. üöÄ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–æ—Ñ–∏—Å/—Ñ—Ä–∏–ª–∞–Ω—Å/–±–∏–∑–Ω–µ—Å)  
5. üìÖ –í–∞–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥  

–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birth}  
–°—Ñ–µ—Ä–∞ / –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ${profession.trim()}  
–ö–∞—Ä—å–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å: ${question.trim()}`;

    for (const model of MODELS) {
      try {
        const { data } = await axios.post(
          "https://openrouter.ai/api/v1/chat/completions",
          {
            model,
            messages: [
              { role: "system", content: SYSTEM_MSG },
              { role: "user", content: userPrompt },
            ],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              "Content-Type": "application/json",
            },
          }
        );

        const answer = (data.choices?.[0]?.message?.content || "").trim();
        await ctx.reply(answer || "üåå –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç.");
        logger.info(`[career] ok ${model} ${Date.now() - t0}–º—Å`);
        pending.delete(ctx.from.id);
        flow.delete(ctx.from.id);
        return;
      } catch (e) {
        logger.warn(`[career] FAIL ${model} | ${e.code || e.response?.status}`);
      }
    }

    ctx.reply("üõ†Ô∏è –°–∞—Ç—É—Ä–Ω —É—à—ë–ª –≤ –æ—Ç–ø—É—Å–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
  });
};

// const { Markup } = require("telegraf");
// const axios = require("axios");
// const logger = require("../../../logger");
// const MODELS = require("../../../models");
// const pending = require("../../pendingStore");

// module.exports = (bot, flow) => {
//   const feature = "career";
//   const label = "–∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑";

//   /* ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
//   bot.action("career_start", async (ctx) => {
//     await ctx.answerCbQuery();
//     flow.set(ctx.from.id, feature);

//     pending.set(ctx.from.id, {
//       label,
//       ask: `‚ú® –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

// –ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ —á—ë—Ç–∫–æ 4-–º—è —Å—Ç—Ä–æ–∫–∞–º–∏:

// 1) üìÖ  –î–∞—Ç–∞ ‚è∞ –í—Ä–µ–º—è
// 2) üó∫  –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
// 3) üíº –¢–µ–∫—É—â–∞—è —Å—Ñ–µ—Ä–∞ / –¥–æ–ª–∂–Ω–æ—Å—Ç—å
// 4) üéØ –ì–ª–∞–≤–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å (1-2 —Ñ—Ä–∞–∑—ã)

// –ü—Ä–∏–º–µ—Ä:
// 1) 13.05.1996 09:30
// 2) –ö–∞–∑–∞–Ω—å
// 3) –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥
// 4) –ö—É–¥–∞ —Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ?`,
//     });

//     ctx.reply(
//       `üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *${label}* –ø–µ—Ä–µ–≤–µ–¥–∏ 50 ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n` +
//         "2200 7009 7760 7737\n\n–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —á–µ–∫ üëá",
//       { parse_mode: "Markdown" }
//     );
//   });

//   /* —á–µ—Ç—ã—Ä–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ */
//   const careerReg = /^1\)[\s\S]+?\n2\)[\s\S]+?\n3\)[\s\S]+?\n4\)[\s\S]+/;

//   const SYSTEM_MSG =
//     "–¢—ã –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-HR. –î–∞–π —Ä–æ–≤–Ω–æ 5 –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤, " +
//     "–∫–∞–∂–¥—ã–π ‚â§3 —Å—Ç—Ä–æ–∫–∏, –≤—Å–µ–≥–æ ‚â§1200 —Å–∏–º–≤–æ–ª–æ–≤. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫, –±–µ–∑ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤ –æ —Å–º–µ—Ä—Ç–∏.";

//   bot.hears(careerReg, async (ctx) => {
//     if (flow.get(ctx.from.id) !== feature) return;

//     const tag = ctx.from.username || ctx.from.id;
//     const t0 = Date.now();
//     logger.info(`[career] –∑–∞–ø—Ä–æ—Å @${tag}`);

//     await ctx.reply("üìà –ß–∏—Ç–∞—é –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏‚Ä¶");

//     const userPrompt = `–°–æ—Å—Ç–∞–≤—å *–∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑* –ø–æ 5 –±–ª–æ–∫–∞–º:

// 1. üèÜ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
// 2. ‚ö†Ô∏è –†–∏—Å–∫–∏ –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ
// 3. üí∞ –ü–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥ –∏ –ª—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞
// 4. üöÄ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–æ—Ñ–∏—Å/—Ñ—Ä–∏–ª–∞–Ω—Å/–±–∏–∑–Ω–µ—Å)
// 5. üìÖ –í–∞–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥

// –î–∞–Ω–æ:
// ${ctx.message.text.trim()}`;

//     for (const model of MODELS) {
//       try {
//         const { data } = await axios.post(
//           "https://openrouter.ai/api/v1/chat/completions",
//           {
//             model,
//             messages: [
//               { role: "system", content: SYSTEM_MSG },
//               { role: "user", content: userPrompt },
//             ],
//           },
//           {
//             headers: {
//               Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
//               "Content-Type": "application/json",
//             },
//           }
//         );

//         const answer = (data.choices?.[0]?.message?.content || "")
//           .replace(/\*\*/g, "") // —É–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω–æ–µ
//           .trim();

//         await ctx.reply(answer || "üåå –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç.");
//         logger.info(`[career] ok ${model} ${Date.now() - t0}–º—Å`);
//         pending.delete(ctx.from.id);
//         flow.delete(ctx.from.id);
//         return;
//       } catch (e) {
//         logger.warn(`[career] FAIL ${model} | ${e.code || e.response?.status}`);
//       }
//     }
//     ctx.reply("üõ†Ô∏è –°–∞—Ç—É—Ä–Ω —É—à—ë–ª –≤ –æ—Ç–ø—É—Å–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
//   });
// };
