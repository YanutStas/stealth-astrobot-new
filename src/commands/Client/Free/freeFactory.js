/*  src/commands/Client/Free/freeFactory.js  */
const axios = require("axios");
const { Markup } = require("telegraf");
const logger = require("../../../logger");
const MODELS = require("../../../models");

const COMMON_SYS =
  "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –ù–µ –≤—Å—Ç–∞–≤–ª—è–π ¬´###¬ª –∏ –ª–∏—à–Ω–∏–µ –ø—É–Ω–∫—Ç—ã. " +
  "–ü–∏—à–∏ ‚â§1200 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, —ç–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ. –°–µ–π—á–∞—Å 2025 –≥–æ–¥.";

const inProgress = new Map(); // uid ‚Üí true

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LLM helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
async function runFreeLLM(ctx, { prompt, sysMsg, waitText, featTag }) {
  const uid = ctx.from.id;
  const log = logger.child({ feat: featTag });
  const t0 = Date.now();

  if (inProgress.get(uid)) {
    await ctx.reply("‚è≥ –Ø –µ—â—ë –¥—É–º–∞—é –Ω–∞–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ—Ç–≤–µ—Ç–æ–º‚Ä¶");
    return;
  }
  inProgress.set(uid, true);
  await ctx.reply(waitText);

  for (const model of MODELS) {
    try {
      const { data } = await axios.post(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          model,
          messages: [
            { role: "system", content: `${COMMON_SYS}\n${sysMsg}` },
            { role: "user", content: prompt },
          ],
        },
        {
          timeout: 20000,
          headers: {
            Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );

      const answer = (data.choices?.[0]?.message?.content || "").trim();
      log.info({ uid, model, t: Date.now() - t0 }, "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç");

      /* –æ—Ç–≤–µ—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏  */
      await ctx.reply(
        answer || "üåå –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç.",
        Markup.inlineKeyboard([
          [Markup.button.callback("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", "back_to_menu")],
        ])
      );

      inProgress.delete(uid);
      return;
    } catch (e) {
      log.warn({ uid, model, code: e.code || e.response?.status }, "fail");
    }
  }

  await ctx.reply("üõ†Ô∏è –ö–æ—Å–º–æ—Å –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
  inProgress.delete(uid);
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ createFeature –¥–ª—è general.js ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function createFreeFeature(bot, flow, cfg) {
  const { buttonId, waitText, askText, regExp, buildPrompt, sysMsg, validate } =
    cfg;

  bot.action(buttonId, async (ctx) => {
    await ctx.answerCbQuery();
    flow.delete(ctx.from.id);
    await ctx.reply(askText, { parse_mode: "Markdown" });
  });

  bot.hears(
    (txt, ctx) => !flow.has(ctx.from.id) && regExp.test(txt),
    (ctx) => {
      const m = ctx.message.text.match(regExp);
      if (validate && !validate(m)) {
        ctx.reply(askText, { parse_mode: "Markdown" });
        return;
      }
      runFreeLLM(ctx, {
        prompt: buildPrompt(m),
        sysMsg,
        waitText,
        featTag: buttonId,
      });
    }
  );
}

module.exports = createFreeFeature; // –¥–ª—è general.js
module.exports.runFreeLLM = runFreeLLM; // –¥–ª—è horoscope / transit
