/*  src/commands/Client/Free/horoscope.js  */
const { Markup } = require("telegraf");
const { DateTime } = require("luxon");
const { runFreeLLM } = require("./freeFactory");

const SIGNS = [
  "–û–≤–µ–Ω",
  "–¢–µ–ª–µ—Ü",
  "–ë–ª–∏–∑–Ω–µ—Ü—ã",
  "–†–∞–∫",
  "–õ–µ–≤",
  "–î–µ–≤–∞",
  "–í–µ—Å—ã",
  "–°–∫–æ—Ä–ø–∏–æ–Ω",
  "–°—Ç—Ä–µ–ª–µ—Ü",
  "–ö–æ–∑–µ—Ä–æ–≥",
  "–í–æ–¥–æ–ª–µ–π",
  "–†—ã–±—ã",
];

module.exports = (bot, flow) => {
  /* ‚Äî –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ ‚Äî */
  bot.action("horoscope_start", async (ctx) => {
    await ctx.answerCbQuery();
    flow.set(ctx.from.id, "horoscope");
    await ctx.reply(
      "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞:",
      Markup.inlineKeyboard(
        SIGNS.map((s) => [Markup.button.callback(s, `hs_${s}`)])
      )
    );
  });

  /* ‚Äî –æ—Ç–≤–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –∑–Ω–∞–∫—É ‚Äî */
  SIGNS.forEach((sign) => {
    bot.action(`hs_${sign}`, async (ctx) => {
      if (flow.get(ctx.from.id) !== "horoscope") return;
      await ctx.answerCbQuery();

      const today = DateTime.local().toFormat("dd.MM.yyyy");
      const prompt = `–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–Ω–∞–∫–∞ ¬´${sign}¬ª, —Å–µ–≥–æ–¥–Ω—è ${today}.
–û—Ç–≤–µ—Ç –≤ 2 –±–ª–æ–∫–∞—Ö (‚â§500 —Å–∏–º–≤–æ–ª–æ–≤):
1. –û–±—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
2. –ó–¥–æ—Ä–æ–≤—å–µ
–ë–µ–∑ –ª—é–±–≤–∏, –¥–µ–Ω–µ–≥ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.`;

      const backKb = Markup.inlineKeyboard([
        [Markup.button.callback("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", "back_to_menu")],
      ]);

      await runFreeLLM(ctx, {
        prompt,
        sysMsg: "–ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —ç–º–æ–¥–∑–∏.",
        waitText: "üîÆ –°–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–≥–Ω–æ–∑‚Ä¶",
        featTag: "horoscope",
        keyboard: backKb,
      });

      /* –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ ‚Äî –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–Ω–∞–∫ */
    });
  });
};
