// src/commands/Client/Free/horoscope.js

const axios = require("axios");
const { DateTime } = require("luxon");
const { Markup } = require("telegraf");
const logger = require("../../../logger");
const MODELS = require("../../../models");

// –°–ø–∏—Å–æ–∫ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ (12 —à—Ç—É–∫)
const SIGNS = [
  "–û–≤–µ–Ω",
  "–¢–µ–ª–µ—Ü",
  "–ë–ª–∏–∑–Ω–µ—Ü—ã",
  "–†–∞–∫",
  "–õ–µ–≤",
  "–î–µ–≤–∞",
  "–í–µ—Å—ã",
  "–°–∫–æ—Ä–ø–∏–æ–Ω",
  "–°—Ç—Ä–µ–ª–µ—Ü",
  "–ö–æ–∑–µ—Ä–æ–≥",
  "–í–æ–¥–æ–ª–µ–π",
  "–†—ã–±—ã",
];

module.exports = (bot, flow) => {
  /* ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∞ ¬´–ì–æ—Ä–æ—Å–∫–æ–ø (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.action("horoscope_start", async (ctx) => {
    await ctx.answerCbQuery();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º ‚Äúhoroscope‚Äù
    flow.set(ctx.from.id, "horoscope");

    await ctx.reply(
      "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —Å–æ–ª–Ω–µ—á–Ω—ã–π –∑–Ω–∞–∫, –∏ —è –¥–∞–º –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑:\n\n",
      Markup.inlineKeyboard(
        SIGNS.map((sign) => [
          Markup.button.callback(sign, `horoscope_sign_${sign}`),
        ])
      )
    );
  });

  /* ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ (—á–µ—Ä–µ–∑ action) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  SIGNS.forEach((sign) => {
    bot.action(`horoscope_sign_${sign}`, async (ctx) => {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ ‚Äúhoroscope‚Äù ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if (flow.get(ctx.from.id) !== "horoscope") {
        return;
      }

      await ctx.answerCbQuery();
      const t0 = Date.now();
      const tag = ctx.from.username || ctx.from.id;

      logger.info(`[horoscope] –∑–∞–ø—Ä–æ—Å @${tag} (–∑–Ω–∞–∫: ${sign})`);
      await ctx.reply("üîÆ –°–æ—Å—Ç–∞–≤–ª—è—é –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑‚Ä¶");

      // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
      const today = DateTime.local().toFormat("dd.MM.yyyy");
      const userPrompt = `–î–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–Ω–∞–∫–∞ ¬´${sign}¬ª, 
—É—á—Ç–∏, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è ${today}.  
–û—Ç–≤–µ—Ç —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ –¥–≤–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –±–ª–æ–∫–∞ (–∫–∞–∂–¥—ã–π –±–ª–æ–∫ ‚Äî 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞, –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):
1. –û–±—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏  
2. –ó–¥–æ—Ä–æ–≤—å–µ  

*–ó–∞–ø—Ä–µ—â–µ–Ω–æ* —É–ø–æ–º–∏–Ω–∞—Ç—å –ª—é–±–æ–≤—å / –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–µ–Ω—å–≥–∏ / –∫–∞—Ä—å–µ—Ä—É –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.  
–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏.  

–ü–∏—à–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —ç–º–æ–¥–∑–∏. –ù–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏ 500 —Å–∏–º–≤–æ–ª–æ–≤.`;

      for (const model of MODELS) {
        try {
          const { data } = await axios.post(
            "https://openrouter.ai/api/v1/chat/completions",
            {
              model,
              messages: [
                {
                  role: "system",
                  content:
                    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ —à–∞–±–ª–æ–Ω—É.",
                },
                { role: "user", content: userPrompt },
              ],
            },
            {
              headers: {
                Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
                "Content-Type": "application/json",
              },
            }
          );

          const answer = (data.choices?.[0]?.message?.content || "").trim();
          logger.debug(
            `[horoscope] ‚ñºPROMPT(${model})\n${userPrompt}\n‚ñ≤ANSWER(first300)\n${answer.slice(
              0,
              300
            )}‚Ä¶`
          );

          await ctx.reply(
            (answer || "üåå –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") +
              "\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
            { parse_mode: "Markdown" }
          );
          logger.info(`[horoscope] ok ${model} ${Date.now() - t0}–º—Å`);

          // –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ ‚Äúhoroscope‚Äù
          flow.delete(ctx.from.id);
          return;
        } catch (e) {
          logger.warn(
            `[horoscope] FAIL ${model} | ${e.response?.status || e.code}`
          );
        }
      }

      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª:
      await ctx.reply(
        "üõ†Ô∏è –ü–ª–∞–Ω–µ—Ç—ã –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
        { parse_mode: "Markdown" }
      );
      flow.delete(ctx.from.id);
    });
  });
};
