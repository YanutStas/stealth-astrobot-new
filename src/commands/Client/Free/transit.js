// src/commands/Client/Free/transit.js

const axios = require("axios");
const { DateTime } = require("luxon");
const { Markup } = require("telegraf");
const logger = require("../../../logger");
const MODELS = require("../../../models");

module.exports = (bot, flow) => {
  /* ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∞ ¬´–¢—Ä–∞–Ω–∑–∏—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.action("transit_start", async (ctx) => {
    await ctx.answerCbQuery();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º ‚Äútransit‚Äù
    flow.set(ctx.from.id, "transit");

    await ctx.reply(
      "üî≠ –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω–∑–∏—Ç–∞:\n\n",
      Markup.inlineKeyboard([
        [Markup.button.callback("–°–µ–≥–æ–¥–Ω—è", "transit_today")],
        [Markup.button.callback("–ó–∞–≤—Ç—Ä–∞", "transit_tomorrow")],
      ])
    );
  });

  /* ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.action("transit_today", async (ctx) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ ‚Äútransit‚Äù
    if (flow.get(ctx.from.id) !== "transit") {
      return;
    }
    await ctx.answerCbQuery();

    const t0 = Date.now();
    const tag = ctx.from.username || ctx.from.id;
    logger.info(`[transit] –∑–∞–ø—Ä–æ—Å @${tag} (—Å–µ–≥–æ–¥–Ω—è)`);

    await ctx.reply("‚ôíÔ∏è –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω–∑–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è‚Ä¶");
    const today = DateTime.local().toFormat("dd.MM.yyyy");

    const userPrompt = `–î–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω–∑–∏—Ç –Ω–∞ –¥–∞—Ç—É ${today}.  
–û—Ç–≤–µ—Ç —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –±–ª–æ–∫–∞ (–∫–∞–∂–¥—ã–π –±–ª–æ–∫ ‚Äî 1 –∞–±–∑–∞—Ü, –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):
1. –û–±—â–∏–π –æ–±–∑–æ—Ä –ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –≤–ª–∏—è–Ω–∏–π  
2. –≠–º–æ—Ü–∏–∏  
3. –®—É—Ç–ª–∏–≤—ã–π —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è  

*–ó–∞–ø—Ä–µ—â–µ–Ω–æ* —É–ø–æ–º–∏–Ω–∞—Ç—å –ª—é–±–æ–≤—å / –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–µ–Ω—å–≥–∏ / –∫–∞—Ä—å–µ—Ä—É –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.  
–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏.  

–ü–∏—à–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —ç–º–æ–¥–∑–∏. –ù–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏ 500 —Å–∏–º–≤–æ–ª–æ–≤.`;

    for (const model of MODELS) {
      try {
        const { data } = await axios.post(
          "https://openrouter.ai/api/v1/chat/completions",
          {
            model,
            messages: [
              {
                role: "system",
                content:
                  "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ —à–∞–±–ª–æ–Ω—É.",
              },
              { role: "user", content: userPrompt },
            ],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              "Content-Type": "application/json",
            },
          }
        );

        const answer = (data.choices?.[0]?.message?.content || "").trim();
        logger.debug(
          `[transit] ‚ñºPROMPT(${model})\n${userPrompt}\n‚ñ≤ANSWER(first300)\n${answer.slice(
            0,
            300
          )}‚Ä¶`
        );

        await ctx.reply(
          (answer || "üåå –¢—Ä–∞–Ω–∑–∏—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") +
            "\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
          { parse_mode: "Markdown" }
        );
        logger.info(`[transit] ok ${model} ${Date.now() - t0}–º—Å`);

        flow.delete(ctx.from.id);
        return;
      } catch (e) {
        logger.warn(
          `[transit] FAIL ${model} | ${e.response?.status || e.code}`
        );
      }
    }

    await ctx.reply(
      "üõ†Ô∏è –ü–ª–∞–Ω–µ—Ç—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
      { parse_mode: "Markdown" }
    );
    flow.delete(ctx.from.id);
  });

  /* ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.action("transit_tomorrow", async (ctx) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ ‚Äútransit‚Äù
    if (flow.get(ctx.from.id) !== "transit") {
      return;
    }
    await ctx.answerCbQuery();

    const t0 = Date.now();
    const tag = ctx.from.username || ctx.from.id;
    logger.info(`[transit] –∑–∞–ø—Ä–æ—Å @${tag} (–∑–∞–≤—Ç—Ä–∞)`);

    await ctx.reply("‚ôíÔ∏è –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω–∑–∏—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞‚Ä¶");
    const tomorrow = DateTime.local().plus({ days: 1 }).toFormat("dd.MM.yyyy");

    const userPrompt = `–î–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω–∑–∏—Ç –Ω–∞ –¥–∞—Ç—É ${tomorrow}.  
–û—Ç–≤–µ—Ç —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –±–ª–æ–∫–∞ (–∫–∞–∂–¥—ã–π –±–ª–æ–∫ ‚Äî 1 –∞–±–∑–∞—Ü, –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):
1. –û–±—â–∏–π –æ–±–∑–æ—Ä –ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –≤–ª–∏—è–Ω–∏–π  
2. –≠–º–æ—Ü–∏–∏  
3. –®—É—Ç–ª–∏–≤—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞  

*–ó–∞–ø—Ä–µ—â–µ–Ω–æ* —É–ø–æ–º–∏–Ω–∞—Ç—å –ª—é–±–æ–≤—å / –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–µ–Ω—å–≥–∏ / –∫–∞—Ä—å–µ—Ä—É –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.  
–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏.  

–ü–∏—à–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —ç–º–æ–¥–∑–∏. –ù–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏ 500 —Å–∏–º–≤–æ–ª–æ–≤.`;

    for (const model of MODELS) {
      try {
        const { data } = await axios.post(
          "https://openrouter.ai/api/v1/chat/completions",
          {
            model,
            messages: [
              {
                role: "system",
                content:
                  "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ —à–∞–±–ª–æ–Ω—É.",
              },
              { role: "user", content: userPrompt },
            ],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              "Content-Type": "application/json",
            },
          }
        );

        const answer = (data.choices?.[0]?.message?.content || "").trim();
        logger.debug(
          `[transit] ‚ñºPROMPT(${model})\n${userPrompt}\n‚ñ≤ANSWER(first300)\n${answer.slice(
            0,
            300
          )}‚Ä¶`
        );

        await ctx.reply(
          (answer || "üåå –¢—Ä–∞–Ω–∑–∏—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") +
            "\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
          { parse_mode: "Markdown" }
        );
        logger.info(`[transit] ok ${model} ${Date.now() - t0}–º—Å`);

        flow.delete(ctx.from.id);
        return;
      } catch (e) {
        logger.warn(
          `[transit] FAIL ${model} | ${e.response?.status || e.code}`
        );
      }
    }

    await ctx.reply(
      "üõ†Ô∏è –ü–ª–∞–Ω–µ—Ç—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
      { parse_mode: "Markdown" }
    );
    flow.delete(ctx.from.id);
  });
};
