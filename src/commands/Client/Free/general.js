const { Markup } = require("telegraf");
const { DateTime } = require("luxon");
const { drawNatalChart } = require("../../../utils/astroChart");
const { runFreeLLM } = require("./freeFactory");

/* ‚îÄ‚îÄ –≤–∞–ª–∏–¥–∞—Ü–∏—è ‚îÄ‚îÄ */
const reInput = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;
const isOk = (t) =>
  reInput.test(t.trim()) &&
  DateTime.fromFormat(t.split(/\s+/).slice(0, 2).join(" "), "dd.MM.yyyy HH:mm")
    .isValid;

module.exports = (bot) => {
  /* –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é */
  bot.action("general_start", async (ctx) => {
    await ctx.answerCbQuery();
    ctx.reply(
      "–ß—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é *–Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É*, –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫:\n\n" +
        "üìÖ –î–î.MM.–ì–ì–ì–ì   ‚è∞ –ß–ß:–ú–ú   üó∫ –ì–æ—Ä–æ–¥\n\n" +
        "–ü—Ä–∏–º–µ—Ä: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞",
      { parse_mode: "Markdown" }
    );
  });

  /* –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
  bot.hears(
    (t) => isOk(t),
    async (ctx) => {
      const uid = ctx.from.id;
      const input = ctx.message.text.trim();

      await ctx.reply("üî≠ –°–∫–∞–Ω–∏—Ä—É—é –∑–≤—ë–∑–¥—ã –∏ —Ä–∏—Å—É—é –∫–∞—Ä—Ç—É‚Ä¶ (–¥–æ 1-2 –º–∏–Ω)");
      ctx.telegram.sendChatAction(ctx.chat.id, "upload_photo");

      /* –∫–∞—Ä—Ç–∏–Ω–∫–∞ */
      let img;
      try {
        img = drawNatalChart(uid, input);
      } catch (e) {
        console.error("Error generating chart:", e);
        await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        return;
      }

      /* —Ç–µ–∫—Å—Ç ‚â§900 —Å–∏–º–≤. */
      const prompt =
        `–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç (‚â§900 —Å–∏–º–≤):\n` +
        `1. –°–æ–ª–Ω—Ü–µ ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä\n2. –õ—É–Ω–∞ ‚Äî —ç–º–æ—Ü–∏–∏\n3. –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ‚Äî –≤–Ω–µ—à–Ω–µ–µ ¬´—è¬ª\n` +
        `4. –û–ø—ã—Ç –∏ –∑–Ω–∞–Ω–∏—è\n5. –¢–∞–ª–∞–Ω—Ç—ã –∏ —Ö–æ–±–±–∏\n6. –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–µ—Å—É—Ä—Å\n7. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç\n\n` +
        `–ò—Ç–æ–≥: 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n–ó–∞–ø—Ä–µ—â–µ–Ω–æ: –ª—é–±–æ–≤—å, –¥–µ–Ω—å–≥–∏, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.\n–î–∞—Ç–∞: ${input}`;

      let txt =
        (await runFreeLLM(ctx, {
          prompt,
          sysMsg: "–ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —ç–º–æ–¥–∑–∏, –±–ª–æ–∫–∞–º–∏.",
          featTag: "general",
          send: false,
        })) || "üåå –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç.";

      /* caption –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 1024 byte ‚Üí –∫–æ—Ä–æ—Ç–∏–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ */
      const footer =
        "\n\n‚Äî\nüîì –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ *–ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä–µ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏* ‚Äî –≤ –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö üëá";
      const CAP_LIMIT = 1024;
      if ((txt + footer).length > CAP_LIMIT)
        txt = txt.slice(0, CAP_LIMIT - footer.length - 1) + "‚Ä¶";

      const kb = Markup.inlineKeyboard([
        [Markup.button.callback("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", "back_to_menu")],
      ]);

      try {
        await ctx.replyWithPhoto(
          { source: img },
          {
            caption: txt + footer,
            parse_mode: "Markdown",
            reply_markup: kb.reply_markup,
          }
        );
      } catch (e) {
        console.error("Error sending photo:", e);
        await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
      }
    }
  );
};
