// src/commands/Client/Free/general.js

const axios = require("axios");
const { DateTime } = require("luxon");
const { Markup } = require("telegraf");
const logger = require("../../../logger");
const MODELS = require("../../../models");

// –†–ï–ì–£–õ–Ø–†–ö–ê –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã (–Ω–∞—Ç–∞–ª—å–Ω–æ–π)
const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;
const isValid = (t) =>
  natalReg.test(t.trim()) &&
  DateTime.fromFormat(t.split(/\s+/).slice(0, 2).join(" "), "dd.MM.yyyy HH:mm")
    .isValid;

// ampersand –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ ‚Äú—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å‚Äù
const dualReg = /&/;

module.exports = (bot, flow) => {
  /* ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∞ ¬´–û–±—â–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  bot.action("general_start", async (ctx) => {
    await ctx.answerCbQuery();
    // –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º ‚Äúgeneral‚Äù
    flow.set(ctx.from.id, "general");

    await ctx.reply(
      "–ß—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é *–Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É*, –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫:\n\n" +
        "üìÖ –î–î.MM.–ì–ì–ì–ì   ‚è∞ –ß–ß:–ú–ú   üó∫ –ì–æ—Ä–æ–¥\n\n" +
        "–ü—Ä–∏–º–µ—Ä: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞",
      { parse_mode: "Markdown" }
    );
  });

  /* ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –µ—Å–ª–∏ flow === "general" –∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–π –∏ –±–µ–∑ '&' ‚îÄ‚îÄ */
  bot.hears(
    async (txt, ctx) =>
      flow.get(ctx.from.id) === "general" && // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞
      isValid(txt) &&
      !dualReg.test(txt),
    async (ctx) => {
      const t0 = Date.now();
      const tag = ctx.from.username || ctx.from.id;
      logger.info(`[free] –∑–∞–ø—Ä–æ—Å @${tag}`);

      await ctx.reply("üî≠ –°–∫–∞–Ω–∏—Ä—É—é –∑–≤—ë–∑–¥—ã‚Ä¶");

      const prompt = `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç—á—ë—Ç (‚â§1200 —Å–∏–º) –ø–æ 7 –ø—É–Ω–∫—Ç–∞–º:
1. ‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä  
2. üåô –õ—É–Ω–∞ ‚Äî —ç–º–æ—Ü–∏–∏  
3. ü°± –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ‚Äî –≤–Ω–µ—à–Ω–µ–µ ¬´—è¬ª  
4. üîé –û–ø—ã—Ç –∏ –∑–Ω–∞–Ω–∏—è  
5. üé® –¢–∞–ª–∞–Ω—Ç—ã –∏ —Ö–æ–±–±–∏  
6. üßò –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–µ—Å—É—Ä—Å  
7. üåÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç  

‚Äî
‚ú® –í –∏—Ç–æ–≥–µ: (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

*–ó–∞–ø—Ä–µ—â–µ–Ω–æ* —É–ø–æ–º–∏–Ω–∞—Ç—å –ª—é–±–æ–≤—å / –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–µ–Ω—å–≥–∏ / –∫–∞—Ä—å–µ—Ä—É –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.  
–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏.  
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${ctx.message.text.trim()}`;

      for (const model of MODELS) {
        try {
          const { data } = await axios.post(
            "https://openrouter.ai/api/v1/chat/completions",
            {
              model,
              messages: [
                {
                  role: "system",
                  content:
                    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ 7 –ø—É–Ω–∫—Ç–∞–º–∏ –∏ –∏—Ç–æ–≥–æ–º, ‚â§1200 —Å–∏–º–≤–æ–ª–æ–≤, —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏. –ù–∏–∫–∞–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ —Ä–µ–∫–ª–∞–º—ã.",
                },
                { role: "user", content: prompt },
              ],
            },
            {
              headers: {
                Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
                "Content-Type": "application/json",
              },
            }
          );

          const answer = (data.choices?.[0]?.message?.content || "").trim();

          logger.debug(
            `[free] ‚ñºPROMPT(${model})\n${prompt}\n‚ñ≤ANSWER(first400)\n${answer.slice(
              0,
              400
            )}‚Ä¶`
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –ø–ª–∞—Ç–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
          await ctx.reply(
            (answer || "üåå –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç.") +
              "\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
            { parse_mode: "Markdown" }
          );
          logger.info(`[free] ok ${model} ${Date.now() - t0} –º—Å`);

          // –°–ë–†–ê–°–´–í–ê–ï–ú —Ä–µ–∂–∏–º ‚Äúgeneral‚Äù ( –±–æ–ª—å—à–µ –Ω–µ —Å–ª—É—à–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç )
          flow.delete(ctx.from.id);
          return;
        } catch (e) {
          logger.warn(
            `[free] FAIL ${model} | ${e.code || e.response?.status} ${
              e.message
            }`
          );
          // –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
        }
      }

      // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ ‚Äú—É–ø–∞–ª–∏‚Äù:
      await ctx.reply(
        "üõ†Ô∏è –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
        { parse_mode: "Markdown" }
      );
      flow.delete(ctx.from.id);
    }
  );
};

// /*  src/commands/Client/Free/general.js  */
// const axios = require("axios");
// const { DateTime } = require("luxon");
// const { Markup } = require("telegraf");
// const logger = require("../../../logger");
// const MODELS = require("../../../models");

// /* ‚îÄ‚îÄ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
// const natalReg = /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}\s+.+$/;
// const isValid = (t) =>
//   natalReg.test(t.trim()) &&
//   DateTime.fromFormat(t.split(/\s+/).slice(0, 2).join(" "), "dd.MM.yyyy HH:mm")
//     .isValid;

// /* ampersand –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π ¬´—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏¬ª, –ø–æ—ç—Ç–æ–º—É
//    –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—è–∑–∞–Ω –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è */
// const dualReg = /&/;

// /* —Å–∏—Å—Ç–µ–º–∫–∞ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π */
// const SYSTEM_MSG =
//   "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ 7 –ø—É–Ω–∫—Ç–∞–º–∏ –∏ –∏—Ç–æ–≥–æ–º, ‚â§1200 —Å–∏–º–≤–æ–ª–æ–≤, " +
//   "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–ª—é–±–æ–≤—å/–¥–µ–Ω—å–≥–∏/—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å¬ª –∑–∞–ø—Ä–µ—â–µ–Ω—ã.";

// /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
// module.exports = (bot) => {
//   /* –∫–Ω–æ–ø–∫–∞ ¬´–û–±—â–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)¬ª */
//   bot.action("general_start", async (ctx) => {
//     await ctx.answerCbQuery();
//     ctx.reply(
//       "–ß—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ—é *–Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É*, –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫:\n\n" +
//         "üìÖ –î–î.MM.–ì–ì–ì–ì   ‚è∞ –ß–ß:–ú–ú   üó∫ –ì–æ—Ä–æ–¥\n\n" +
//         "–ü—Ä–∏–º–µ—Ä: 01.01.2000 10:00 –ú–æ—Å–∫–≤–∞",
//       { parse_mode: "Markdown" }
//     );
//   });

//   /* —Å–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
//   bot.hears(
//     async (txt) => isValid(txt) && !dualReg.test(txt), // ‚Üê –µ—Å–ª–∏ –µ—Å—Ç—å ¬´&¬ª, —É—Ö–æ–¥–∏–º
//     async (ctx) => {
//       const t0 = Date.now();
//       const tag = ctx.from.username || ctx.from.id;
//       logger.info(`[free] –∑–∞–ø—Ä–æ—Å @${tag}`);

//       await ctx.reply("üî≠ –°–∫–∞–Ω–∏—Ä—É—é –∑–≤—ë–∑–¥—ã‚Ä¶");

//       const prompt = `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç—á—ë—Ç (‚â§1200 —Å–∏–º) –ø–æ 7 –ø—É–Ω–∫—Ç–∞–º:
// 1. ‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä
// 2. üåô –õ—É–Ω–∞ ‚Äî —ç–º–æ—Ü–∏–∏
// 3. ü°± –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ‚Äî –≤–Ω–µ—à–Ω–µ–µ ¬´—è¬ª
// 4. üîé –û–ø—ã—Ç –∏ –∑–Ω–∞–Ω–∏—è
// 5. üé® –¢–∞–ª–∞–Ω—Ç—ã –∏ —Ö–æ–±–±–∏
// 6. üßò –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–µ—Å—É—Ä—Å
// 7. üåÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç

// ‚Äî
// ‚ú® –í –∏—Ç–æ–≥–µ: (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

// *–ó–∞–ø—Ä–µ—â–µ–Ω–æ* —É–ø–æ–º–∏–Ω–∞—Ç—å –ª—é–±–æ–≤—å / –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–µ–Ω—å–≥–∏ / –∫–∞—Ä—å–µ—Ä—É –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.
// –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏.
// –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${ctx.message.text.trim()}`;

//       for (const model of MODELS) {
//         try {
//           const { data } = await axios.post(
//             "https://openrouter.ai/api/v1/chat/completions",
//             {
//               model,
//               messages: [
//                 { role: "system", content: SYSTEM_MSG },
//                 { role: "user", content: prompt },
//               ],
//             },
//             {
//               headers: {
//                 Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
//                 "Content-Type": "application/json",
//               },
//             }
//           );

//           const answer = (data.choices?.[0]?.message?.content || "").trim();

//           /* DEBUG: –ø–∏—à–µ–º prompt + 1-—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –≤–∏–¥–Ω–æ –±—ã–ª–æ,
//              –∫–∞–∫–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–ª—å–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª */
//           logger.debug(
//             `[free] ‚ñºPROMPT(${model})\n${prompt}\n` +
//               `‚ñ≤ANSWER(first400)\n${answer.slice(0, 400)}‚Ä¶`
//           );

//           await ctx.reply(
//             (answer || "üåå –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç.") +
//               "\n\nüíé *–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—é–±–≤–∏, –¥–µ–Ω—å–≥–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?* –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!",
//             { parse_mode: "Markdown" }
//           );
//           logger.info(`[free] ok ${model} ${Date.now() - t0} –º—Å`);
//           return;
//         } catch (e) {
//           logger.warn(
//             `[free] FAIL ${model} | ${e.code || e.response?.status} ${
//               e.message
//             }`
//           );
//         }
//       }

//       ctx.reply("üõ†Ô∏è –ö–æ—Å–º–æ—Å –º–æ–ª—á–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
//     }
//   );
// };
